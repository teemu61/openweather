import { DataSource } from '@angular/cdk/collections';
import { Component, OnInit, ViewChild, AfterViewInit, ElementRef } from '@angular/core';
import { Train } from '../model/Train';
import { Router, ActivatedRoute } from '@angular/router';
import { TrainService } from '../service/train-service';
import { TimeTableRow } from '../model/TimeTableRow';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';
import { map, flatMap, tap, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { MatPaginator } from '@angular/material/paginator';
import { toBase64String } from '@angular/compiler/src/output/source_map';
import { fromEvent } from 'rxjs';

export interface Element {
  cancelled: boolean;
  deleted: boolean;
  departureDate: string;
  operatorShortCode: string;
  operatorUICCode: number;
  runningCurrently: boolean;
  timetableType: string;
  trainCategory: string;
  trainNumber: number;
  trainType: string;
}

@Component({
  selector: 'app-train-details',
  templateUrl: './train-details.component.html',
  styleUrls: ['./train-details.component.css']
})
export class TrainDetailsComponent implements OnInit, AfterViewInit {
  train: Train;
  element: Element;
  dataSource = new MatTableDataSource([]);
  displayedColumns: string[] = ["key","value"];
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild('input') input: ElementRef;

  constructor(
    public trainService: TrainService, 
    private route: ActivatedRoute, 
    private router: Router) { }

  ngOnInit(): void {
    this.loadTrain("");
  }

  ngAfterViewInit(): void {
    this.dataSource.sort = this.sort;

    fromEvent(this.input.nativeElement,'keyup')
    .pipe(
        debounceTime(150),
        distinctUntilChanged(),
        tap(() => this.loadTrain(this.input.nativeElement.value))
     ).subscribe();
  }

  loadTrain(trainNumber: string) {

  let id = (trainNumber == "") ? this.route.snapshot.params.id : trainNumber; 
  this.trainService.getTrainById(id).pipe(
    map(train => this.trainToElement(train))
    ).subscribe(i => this.updateDataSource(i)) 
}

  updateDataSource(e: Element) {
    let data = [];
    for (const property in e) {
      let key = `${property}`;
      let value = `${e[property]}`;
      let item = {key, value};
      data.push(item);
    }
    this.dataSource.data = data;
    this.dataSource.sort = this.sort;
  }

  trainToElement(train:Train) {
    return { 
      operatorShortCode: train.operatorShortCode,
      operatorUICCode: train.operatorUICCode,
      trainNumber: train.trainNumber,
      trainType: train.trainType,
      cancelled: train.cancelled,
      deleted: train.deleted,
      departureDate: train.departureDate,
      runningCurrently: train.runningCurrently,
      timetableType: train.timetableType,
      trainCategory: train.trainCategory
    } as Element;
  }

}